
version: 2.1


#reusable code

# commands:
#   print_pipeline_id:
#     steps:
#       - run: echo ${CIRCLE_WORKFLOW_ID}
# orbs:
#   aws-cli: circleci/aws-cli@3.1.4
# commands:
#   destroy_environment:
#     steps:
#       - run:
#           name: Destroy environment
#           command: aws cloudformation delete-stack --stack-name myStack
#           when: on_fail

jobs:

  #automate ansible 
  #  configure_infrastructure: 
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["4e:25:d1:5a:5d:f5:fc:a2:d8:e6:bd:f7:1e:61:e7:7e"] # You can get this ID in the section where you registered the SSH Key
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # install the dependencies needed for your playbook
  #           apk add --update ansible 
  #     - run:
  #         name: Configure server
  #         command: |
  #           ansible-playbook -i inventory.txt remotemain.yml






# #Infrastructure pipeline
#   create_infrastructure: 
#         docker:
#           - image: amazon/aws-cli
#         steps:
#           - checkout
#           - run:
#               name: Create Cloudformation Stack
#               command: |
#                 aws cloudformation deploy \
#                   --template-file template.yml \
#                   --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} \
#           - run: return 1
#           - destroy_environment
            
  create_and_deploy_front_end:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Execute bucket.yml - Create Cloudformation Stack
            command: |
              aws cloudformation deploy \
              --template-file bucket.yml \
              --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"

  get_last_deployment_id:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run: yum install -y tar gzip
        - run:
            name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
            command: |
              aws cloudformation \
              list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
              --no-paginate --output text > ~/textfile.txt
        - persist_to_workspace:
            root: ~/
            paths: 
              - textfile.txt

  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"

  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous production version's S3 bucket and CloudFormation stack. 
          # Use $OldBucketID environment variable or mybucket644752792305 below.
          # Similarly, you can create and use $OldStackID environment variable in place of production-distro 
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive
  # a
  # onfail:
  #     docker:
  #       - image: circleci/node:13.8.0
  #     steps:
  #       - run: exit 1
  #       - run:
  #           name: on error
  #           command: echo "Hello Error!"
  #           when: on_fail

  # my_job:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - print_pipeline_id


#--------------------------------------------------
      #hello world using workspace
  # save_hello_world_output:
  #   docker:
  #     - image: cimg/base:stable
  #   steps:
  #     - run:
  #         command: echo "Hello, World From output!">  ~/OUTPUT.txt
  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - OUTPUT.txt

  # print_output_file:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - attach_workspace:
  #         at: ~/
  #     - run: cat ~/OUTPUT.txt

  # say-hello:
  #   docker:
  #     - image: cimg/base:stable
  #   steps:
  #     - run:
  #         command: "echo Hello, World!"
  # say-world:
  #   docker:
  #     - image: cimg/base:stable
  #   steps:
  #     - checkout
  #     - run:
  #         name: "Say world"
  #         command: "echo Hello, World Again !"
  # globalenv:
  #   docker:
  #     - image: cimg/base:stable
  #   steps:
  #     - checkout
  #     - run:
  #         name: "Say world"
  #         command: |
  #           echo $my_env_var
  
workflows:
  say-hello-workflow:
    jobs:
      # - configure_infrastructure
      # - create_infrastructure

        - create_and_deploy_front_end
        - promote_to_production:
            requires: 
              - create_and_deploy_front_end
        - get_last_deployment_id
        - clean_up_old_front_end:
            requires:
              - get_last_deployment_id
              - promote_to_production
      



    # - onfail
     # - my_job
  #     - save_hello_world_output
  #     - print_output_file:
  #         requires:
  #           - save_hello_world_output
      # - say-hello
      # - say-world:
      #     requires:
      #           - say-hello
      # - globalenv
