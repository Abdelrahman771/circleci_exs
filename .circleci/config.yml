
version: 2.1


#reusable code

# commands:
#   print_pipeline_id:
#     steps:
#       - run: echo ${CIRCLE_WORKFLOW_ID}
commands:
    install_awscli:
        description : Install AWS CLI v2
        steps :
          - run :
            name : Install AWS CLI v2
            command : |
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
   # Exercise - Rollback
   destroy_environment:
     steps:
        - run:
            name: Destroy environment
            # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
            # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
            when: on_fail
            command: aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}

jobs:


  #automate ansible 
  #  configure_infrastructure: 
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["4e:25:d1:5a:5d:f5:fc:a2:d8:e6:bd:f7:1e:61:e7:7e"] # You can get this ID in the section where you registered the SSH Key
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # install the dependencies needed for your playbook
  #           apk add --update ansible 
  #     - run:
  #         name: Configure server
  #         command: |
  #           ansible-playbook -i inventory.txt remotemain.yml






  #Infrastructure pipeline
  # Exercise - Rollback
  create_infrastructure: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} \
              --region us-east-1

  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run:
          name: Test job
          # Fail the job intentionally to simulate an error.
          command:  return 1
      - destroy_environment 



  # onfail:
  #     docker:
  #       - image: circleci/node:13.8.0
  #     steps:
  #       - run: exit 1
  #       - run:
  #           name: on error
  #           command: echo "Hello Error!"
  #           when: on_fail

  # my_job:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - print_pipeline_id


#--------------------------------------------------
      #hello world using workspace
  # save_hello_world_output:
  #   docker:
  #     - image: cimg/base:stable
  #   steps:
  #     - run:
  #         command: echo "Hello, World From output!">  ~/OUTPUT.txt
  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - OUTPUT.txt

  # print_output_file:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - attach_workspace:
  #         at: ~/
  #     - run: cat ~/OUTPUT.txt

  # say-hello:
  #   docker:
  #     - image: cimg/base:stable
  #   steps:
  #     - run:
  #         command: "echo Hello, World!"
  # say-world:
  #   docker:
  #     - image: cimg/base:stable
  #   steps:
  #     - checkout
  #     - run:
  #         name: "Say world"
  #         command: "echo Hello, World Again !"
  # globalenv:
  #   docker:
  #     - image: cimg/base:stable
  #   steps:
  #     - checkout
  #     - run:
  #         name: "Say world"
  #         command: |
  #           echo $my_env_var
  
workflows:
  say-hello-workflow:
    jobs:
      # - configure_infrastructure
      
      - create_infrastructure
      - smoke_test



    # - onfail
     # - my_job
  #     - save_hello_world_output
  #     - print_output_file:
  #         requires:
  #           - save_hello_world_output
      # - say-hello
      # - say-world:
      #     requires:
      #           - say-hello
      # - globalenv
